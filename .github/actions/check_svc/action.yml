name: Check ECS Service
description: Check if an ECS cluster and service exist
inputs:
  aws_region:
    description: 'AWS Region'
    required: true
  aws_role:
    description: 'AWS Role to assume'
    required: true
  tfvars_file:
    description: 'Path to the tfvars file'
    required: true

runs:
  using: "composite"
  steps:
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: ${{ inputs.aws_region }}
        role-to-assume: arn:aws:iam::${{ inputs.aws_role }}
        role-session-name: GitHubActions

    - name: Read project_name from tfvars file
      id: read-project-name
      shell: bash
      run: |
        # Extract project_name from tfvars file
        PROJECT_NAME=$(grep 'project_name' "${{ inputs.tfvars_file }}" | sed 's/.*= "\(.*\)"/\1/')
        echo "Extracted Project Name: $PROJECT_NAME"
        echo "PROJECT_NAME=$PROJECT_NAME" >> $GITHUB_ENV

    - name: Check if ECS cluster and service exist and get task definition ARN
      id: check-cluster-and-service
      shell: bash
      run: |
        # Check if the ECS cluster exists and is ACTIVE
        CLUSTER_STATUS=$(aws ecs describe-clusters \
          --clusters ${{ env.PROJECT_NAME }} \
          --region ${{ inputs.aws_region }} \
          --query 'clusters[0].status' \
          --output text 2>/dev/null || echo "NOT_FOUND")

        echo "Cluster status: $CLUSTER_STATUS"

        if [ "$CLUSTER_STATUS" != "ACTIVE" ]; then
          # If cluster is not ACTIVE, set service existence to false
          echo "SERVICE_EXISTS=false" >> $GITHUB_ENV
        else
          # If the cluster is active, check if the service exists
          SERVICE_STATUS=$(aws ecs describe-services \
            --cluster ${{ env.PROJECT_NAME }} \
            --services ${{ env.PROJECT_NAME }} \
            --query 'services[0].status' \
            --region ${{ inputs.aws_region }} \
            --output text 2>/dev/null || echo "NOT_FOUND")

          if [ "$SERVICE_STATUS" == "NOT_FOUND" ]; then
            echo "SERVICE_EXISTS=false" >> $GITHUB_ENV
          else
            echo "SERVICE_EXISTS=true" >> $GITHUB_ENV

            # Retrieve the current task definition ARN
            TASK_DEFINITION_ARN=$(aws ecs describe-services \
              --cluster ${{ env.PROJECT_NAME }} \
              --services ${{ env.PROJECT_NAME }} \
              --query 'services[0].taskDefinition' \
              --region ${{ inputs.aws_region }} \
              --output text)

            echo "TASK_DEFINITION_ARN=$TASK_DEFINITION_ARN" >> $GITHUB_ENV
          fi
        fi

    - name: Output task definition ARN
      shell: bash
      if: env.SERVICE_EXISTS == 'true'
      run: echo "The current task definition ARN is ${{ env.TASK_DEFINITION_ARN }}"
