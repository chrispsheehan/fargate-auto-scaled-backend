name: Build and push image to ECR
description: Pushes an image to ECR when changes are detected in the source code.

inputs:
  aws_account_id:
    description: 'ECR aws account id'
    required: true
  aws_region:
    description: 'ECR aws region'
    required: true

outputs:
  image_tag:
    description: 'The TAG of the pushed ECR image'
  image_uri:
    description: 'The URI of the pushed ECR image'

runs:
  using: 'composite'
  steps:
    - uses: dorny/paths-filter@v3
      id: changes
      with:
        filters: |
          src:
            - 'src/**'
      
    - name: Check if ECR repository is empty
      id: check_should_build
      shell: bash
      run: |
        IMAGE_COUNT=$(aws ecr describe-images --repository-name ${{ github.event.repository.name }} --region ${{ inputs.aws_region }} --query 'imageDetails | length(@)' --output text)
        echo Image count: "$IMAGE_COUNT"
        if [[ "${{ steps.changes.outputs.src }}" == "true" || "$IMAGE_COUNT" -eq 0 ]]; then
          echo "Either src changed or ECR is empty"
          echo "SHOULD_BUILD=true" >> $GITHUB_ENV
        else
          echo "Neither src changed nor ECR is empty"
          echo "SHOULD_BUILD=false" >> $GITHUB_ENV
        fi

    - if: env.SHOULD_BUILD == 'true'
      name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - if: env.SHOULD_BUILD == 'true'
      name: Set variables
      shell: bash
      run: |
        echo "LOCAL_IMAGE=${{ github.event.repository.name }}:local" >> $GITHUB_ENV
        echo "IMAGE_TAG=$(echo $GITHUB_SHA | cut -c 1-6)" >> $GITHUB_ENV

    - if: env.SHOULD_BUILD == 'true'
      name: Build Docker Image
      shell: bash
      run: |
        docker build . -t $LOCAL_IMAGE
        docker tag $LOCAL_IMAGE ${{ inputs.aws_account_id }}.dkr.ecr.${{ inputs.aws_region }}.amazonaws.com/${{ github.event.repository.name }}:$IMAGE_TAG

    - if: env.SHOULD_BUILD == 'true'
      name: Push Docker Image to ECR
      shell: bash
      run: |
        aws ecr get-login-password --region ${{ inputs.aws_region }} | docker login --username AWS --password-stdin ${{ inputs.aws_account_id }}.dkr.ecr.${{ inputs.aws_region }}.amazonaws.com
        docker push ${{ inputs.aws_account_id }}.dkr.ecr.${{ inputs.aws_region }}.amazonaws.com/${{ github.event.repository.name }}:$IMAGE_TAG
        IMAGE_URI="${{ inputs.aws_account_id }}.dkr.ecr.${{ inputs.aws_region }}.amazonaws.com/${{ github.event.repository.name }}:$IMAGE_TAG"
        echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
        echo "image_uri=$IMAGE_URI" >> $GITHUB_OUTPUT

    - if: env.SHOULD_BUILD != 'true'
      name: Get Latest ECR Image Tag
      shell: bash
      run: |
        LATEST_TAG=$(aws ecr describe-images --repository-name ${{ github.event.repository.name }} \
                    --region ${{ inputs.aws_region }} --query 'sort_by(imageDetails,& imagePushedAt)[-1].imageTags[0]' --output text)
        IMAGE_URI="${{ inputs.aws_account_id }}.dkr.ecr.${{ inputs.aws_region }}.amazonaws.com/${{ github.event.repository.name }}:$LATEST_TAG"
        echo "image_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
        echo "image_uri=$IMAGE_URI" >> $GITHUB_OUTPUT
