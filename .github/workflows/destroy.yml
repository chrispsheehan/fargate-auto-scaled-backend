name: Destroy

on:
  workflow_dispatch:
  workflow_call:

env:
  aws_account_id: ${{ vars.AWS_ACCOUNT_ID }}
  aws_region: ${{ vars.AWS_REGION }}
  aws_role: ${{ vars.AWS_ROLE }}

  TF_VAR_project_name: ${{ github.event.repository.name }}
  TF_VAR_region: ${{ vars.AWS_REGION }}
  TF_VAR_private_vpc_name: ecs-private-vpc
  TF_VAR_api_stage_name: dev
  TF_VAR_container_port: 3000
  TF_VAR_load_balancer_port: 80

permissions:
  id-token: write
  contents: read
      
jobs:
  task:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.aws_region }}
          role-to-assume: arn:aws:iam::${{ env.aws_account_id }}:role/${{ env.aws_role }}
          role-session-name: GitHubActions

      - name: Init
        shell: bash
        run: |
          cd tf/task
          terraform init
    
      - name: Destroy
        shell: bash
        id: destroy
        run: |
          cd tf/task
          terraform destroy -auto-approve

  ecr:
    needs: task
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.aws_region }}
          role-to-assume: arn:aws:iam::${{ env.aws_account_id }}:role/${{ env.aws_role }}
          role-session-name: GitHubActions

      - name: Init
        shell: bash
        run: |
          cd tf/ecr
          terraform init
    
      - name: Destroy
        shell: bash
        id: destroy
        run: |
          cd tf/ecr
          terraform destroy -auto-approve

  network:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.aws_region }}
          role-to-assume: arn:aws:iam::${{ env.aws_account_id }}:role/${{ env.aws_role }}
          role-session-name: GitHubActions

      - name: Init
        shell: bash
        run: |
          cd tf/network
          terraform init
    
      - name: Destroy
        shell: bash
        id: destroy
        run: |
          cd tf/network
          terraform destroy -auto-approve

  service:
    runs-on: ubuntu-latest
    needs: network
    steps:
      - uses: actions/checkout@v4
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.aws_region }}
          role-to-assume: arn:aws:iam::${{ env.aws_account_id }}:role/${{ env.aws_role }}
          role-session-name: GitHubActions

      - name: Init
        shell: bash
        run: |
          cd tf/service
          terraform init
    
      - name: Destroy
        shell: bash
        id: destroy
        run: |
          cd tf/service
          terraform destroy -auto-approve

  check:
    needs: 
      - task
      - service
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
            aws-region: ${{ env.aws_region }}
            role-to-assume: arn:aws:iam::${{ env.aws_account_id }}:role/${{ env.aws_role }}
            role-session-name: GitHubActions

      - name: Get current task definition
        id: task-def
        shell: bash
        run: |
          TASK_DEF_ARN=$(aws ecs describe-services \
              --cluster ${{ needs.deploy.outputs.cluster_name }} \
              --services ${{ needs.deploy.outputs.service_name }} \
              --region ${{ env.aws_region }} \
              --query 'services[0].taskDefinition' \
              --output text)
          echo "TASK_DEF_ARN=$TASK_DEF_ARN" >> $GITHUB_ENV

      - name: Get image from task definition
        id: check-image
        shell: bash
        run: |
          CURRENT_IMAGE=$(aws ecs describe-task-definition \
              --task-definition ${{ env.TASK_DEF_ARN }} \
              --region ${{ env.aws_region }} \
              --query 'taskDefinition.containerDefinitions[*].image' \
              --output text)
          echo "CURRENT_IMAGE=$CURRENT_IMAGE"
          echo "CURRENT_IMAGE=$CURRENT_IMAGE" >> $GITHUB_ENV

      - name: Compare with Terraform image
        id: compare
        run: |
          if [ "${{ env.CURRENT_IMAGE }}" != "${{ needs.task-definition.outputs.image_uri }}" ]; then
            echo "ERROR: Image mismatch! Current image: ${{ env.CURRENT_IMAGE }}, Expected: ${{ needs.task-definition.outputs.image_uri }}"
            exit 1
          else
            echo "Image matched: ${{ env.CURRENT_IMAGE }}"
          fi