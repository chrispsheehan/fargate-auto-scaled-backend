name: Deploy

on:
  push:
    branches:
      - 'blue-green-deploy'
  workflow_dispatch:

permissions:
  id-token: write
  contents: read
      
jobs:
  code:
    uses: ./.github/workflows/build.yml
    with:
      aws_account_id: ${{ vars.AWS_ACCOUNT_ID }}
      aws_region: ${{ vars.AWS_REGION }}
      aws_role: ${{ vars.AWS_ROLE }}

  deploy:
    needs: code
    runs-on: ubuntu-latest
    env:
      TF_VAR_FILE: tf/variables.tfvars
    steps:
      - uses: actions/checkout@v4
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: arn:aws:iam::${{ vars.AWS_ACCOUNT_ID }}:role/${{ vars.AWS_ROLE }}
          role-session-name: GitHubActions

      - name: Read code deploy app vars from tfvars file
        id: read-vars
        shell: bash
        run: |
          CODE_DEPLOY_APP_NAME=$(grep 'codedeploy_app_name' "${{ env.TF_VAR_FILE }}" | sed 's/.*= "\(.*\)"/\1/')
          echo "Extracted codedeploy_app_name: $CODE_DEPLOY_APP_NAME"
          echo "CODE_DEPLOY_APP_NAME=$CODE_DEPLOY_APP_NAME" >> $GITHUB_OUTPUT

          CODE_DEPLOY_GROUP_NAME=$(grep 'codedeploy_group_name' "${{ env.TF_VAR_FILE }}" | sed 's/.*= "\(.*\)"/\1/')
          echo "Extracted codedeploy_group_name: $CODE_DEPLOY_APP_NAME"
          echo "CODE_DEPLOY_GROUP_NAME=$CODE_DEPLOY_GROUP_NAME" >> $GITHUB_OUTPUT

          CONTAINER_PORT=$(grep 'container_port' "${{ env.TF_VAR_FILE }}" | sed 's/.*= //')
          echo "Extracted container_port: $CONTAINER_PORT"
          echo "CONTAINER_PORT=$CONTAINER_PORT" >> $GITHUB_OUTPUT

          PROJECT_NAME=$(grep 'project_name' "${{ env.TF_VAR_FILE }}" | sed 's/.*= "\(.*\)"/\1/')
          echo "Extracted project_name: $PROJECT_NAME"
          echo "PROJECT_NAME=$PROJECT_NAME" >> $GITHUB_OUTPUT

      # Step 3: Replace placeholders in the appspec.json file
      - name: Prepare AppSpec File
        run: |
          sed -i 's|{{TASK_VERSION}}|${{ needs.code.outputs.task_definition_revsion }}|g' appspec.json
          sed -i 's|{{TASK_DEFINITION_ARN}}|${{ needs.code.outputs.task_definition_arn }}|g' appspec.json
          sed -i 's|{{CONTAINER_NAME}}|${{ steps.read-vars.outputs.project_name }}|g' appspec.json
          sed -i 's|{{CONTAINER_PORT}}|${{ steps.read-vars.outputs.container_port }}|g' appspec.json
          cat appspec.json

      # Step 4: Create CodeDeploy Deployment
      - name: Create CodeDeploy Deployment
        env:
          APP_NAME: ${{ steps.read-vars.outputs.CODE_DEPLOY_APP_NAME }}
          GROUP_NAME: ${{ steps.read-vars.outputs.CODE_DEPLOY_GROUP_NAME }}
        run: |
          echo "Creating CodeDeploy deployment"
          APP_SPEC_CONTENT=$(cat appspec.json | jq -c .)
          ESCAPED_APP_SPEC_CONTENT=$(echo "$APP_SPEC_CONTENT" | sed 's/"/\\"/g')
          
          echo "{\"revisionType\":\"AppSpecContent\",\"appSpecContent\":{\"content\":$ESCAPED_APP_SPEC_CONTENT}}" > revision.json

          aws deploy create-deployment \
            --application-name "$APP_NAME" \
            --deployment-group-name "$GROUP_NAME" \
            --deployment-config-name CodeDeployDefault.ECSCanary10Percent5Minutes \
            --revision "file://revision.json" \
            --region ${{ vars.AWS_REGION }}
        
      # Step 5: Monitor Deployment Status
      - name: Monitor Deployment Status
        env:
          APP_NAME: ${{ steps.read-vars.outputs.CODE_DEPLOY_APP_NAME }}
          GROUP_NAME: ${{ steps.read-vars.outputs.CODE_DEPLOY_GROUP_NAME }}
        run: |
          echo "Monitoring CodeDeploy deployment status"
          DEPLOYMENT_ID=$(aws deploy list-deployments \
            --application-name "$APP_NAME" \
            --deployment-group-name "$GROUP_NAME" \
            --region ${{ vars.AWS_REGION }} \
            --max-items 1 \
            --query 'deployments[0]' --output text)

          if [ "$DEPLOYMENT_ID" == "None" ]; then
            echo "No deployment found."
            exit 1
          fi

          echo "Deployment ID: $DEPLOYMENT_ID"
          
          # Loop to check the deployment status
          while true; do
            STATUS=$(aws deploy get-deployment --deployment-id $DEPLOYMENT_ID --query 'deploymentInfo.status' --output text)

            echo "Deployment status: $STATUS"

            if [[ "$STATUS" == "Succeeded" ]]; then
              echo "Deployment succeeded!"
              break
            elif [[ "$STATUS" == "Failed" || "$STATUS" == "Stopped" ]]; then
              echo "Deployment failed!"
              exit 1
            else
              echo "Deployment is in progress..."
              sleep 30
            fi
          done