name: Deploy

on:
  push:
    branches:
      - main
  workflow_dispatch:
      
jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      image_uri: ${{ steps.get-latest-uri.outputs.IMAGE_URI }}
    steps:
      - uses: actions/checkout@v4
        with:
            fetch-depth: 0

      - name: Build and push detected changes
        uses: ./.github/actions/build_image
        with:
          dockerhub_username: ${{ vars.DOCKERHUB_USERNAME }}
          dockerhub_password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Get lastest tag
        id: get-latest-uri
        shell: bash
        run: |
          LATEST_TAG=$(curl -s "https://hub.docker.com/v2/repositories/${{ vars.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}/tags/?page_size=1&ordering=last_updated" | jq -r '.results[0].name')
          IMAGE_URI="docker.io/${{ vars.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}:$LATEST_TAG"
          echo "Latest image URI: $IMAGE_URI"
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_OUTPUT

  deploy:
    needs: build
    runs-on: ubuntu-latest
    env:
      aws_account_id: ${{ vars.AWS_ACCOUNT_ID }}
      aws_region: ${{ vars.AWS_REGION }}
      aws_role: ${{ vars.AWS_ROLE }}
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
            aws-region: ${{ env.aws_region }}
            role-to-assume: arn:aws:iam::${{ env.aws_account_id }}:role/${{ env.aws_role }}
            role-session-name: GitHubActions

      - name: Init
        shell: bash
        run: |
            cd tf
            terraform init
    
      - name: Deploy
        shell: bash
        id: deploy
        env:
          TF_VAR_project_name: ${{ github.event.repository.name }}
          TF_VAR_image_uri: ${{ needs.build.outputs.image_uri }}
        run: |
            cd tf
            terraform apply -auto-approve
            echo SITE_URL: $SITE_URL
            echo "SITE_URL=$(terraform output -raw service-url)" >> $GITHUB_OUTPUT

  # test:
  #   needs: deploy
  #   runs-on: ubuntu-latest
  #   env:
  #     SITE_URL: ${{ needs.deploy.outputs.site_url }}
  #   steps:
  #     - uses: actions/checkout@v4
  #       with:
  #           fetch-depth: 0

  #     - name: Test
  #       shell: bash
  #       run: |
  #         bash bin/curl-check.sh
