name: Deploy

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  aws_account_id: ${{ vars.AWS_ACCOUNT_ID }}
  aws_region: ${{ vars.AWS_REGION }}
  aws_role: ${{ vars.AWS_ROLE }}

  TF_VAR_project_name: ${{ github.event.repository.name }}
  TF_VAR_region: ${{ vars.AWS_REGION }}
  TF_VAR_private_vpc_name: ecs-private-vpc
  TF_VAR_api_stage_name: dev
  TF_VAR_container_port: 3000
  TF_VAR_load_balancer_port: 80

permissions:
  id-token: write
  contents: read
      
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.aws_region }}
          role-to-assume: arn:aws:iam::${{ env.aws_account_id }}:role/${{ env.aws_role }}
          role-session-name: GitHubActions

      - name: Init
        shell: bash
        run: |
          cd tf/ecr
          terraform init
    
      - name: Deploy
        shell: bash
        id: deploy
        run: |
          cd tf/ecr
          terraform apply -auto-approve

      - name: Build and push detected changes
        id: build-image
        uses: ./.github/actions/build_image
        with:
          aws_account_id: ${{ vars.AWS_ACCOUNT_ID }}
          aws_region: ${{ vars.AWS_REGION }}

  network:
    runs-on: ubuntu-latest
    outputs:
      lb_security_group_id: ${{ steps.set-envs.outputs.LB_SERCURITY_GROUP_ID }}
      lb_listener_arn: ${{ steps.set-envs.outputs.LB_LISTENER_ARN }}
      target_group_arn: ${{ steps.set-envs.outputs.TARGET_GROUP_ARN }}
      api_invoke_url: ${{ steps.set-envs.outputs.API_INVOKE_URL }}
      private_vpc_id: ${{ steps.set-envs.outputs.PRIVATE_VPC_ID }}
      private_subnet_ids: ${{ steps.set-envs.outputs.PRIVATE_SUBNET_IDS }}
    steps:
      - uses: actions/checkout@v4
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.aws_region }}
          role-to-assume: arn:aws:iam::${{ env.aws_account_id }}:role/${{ env.aws_role }}
          role-session-name: GitHubActions

      - name: Init
        shell: bash
        run: |
          cd tf/network
          terraform init
    
      - name: Deploy
        shell: bash
        id: deploy
        run: |
          cd tf/network
          terraform apply -auto-approve

      - name: Set env vars
        id: set-envs
        shell: bash
        run: |
          cd tf/network

          LB_SERCURITY_GROUP_ID=$(terraform output -raw lb_security_group_id)
          echo "LB_SERCURITY_GROUP_ID=$LB_SERCURITY_GROUP_ID" >> $GITHUB_OUTPUT

          LB_LISTENER_ARN=$(terraform output -raw lb_listener_arn)
          echo "LB_LISTENER_ARN=$LB_LISTENER_ARN" >> $GITHUB_OUTPUT

          TARGET_GROUP_ARN=$(terraform output -raw target_group_arn)
          echo "TARGET_GROUP_ARN=$TARGET_GROUP_ARN" >> $GITHUB_OUTPUT

          API_INVOKE_URL=$(terraform output -raw api_invoke_url)
          echo "API_INVOKE_URL=$API_INVOKE_URL" >> $GITHUB_OUTPUT

          PRIVATE_VPC_ID=$(terraform output -raw private_vpc_id)
          echo "PRIVATE_VPC_ID=$PRIVATE_VPC_ID" >> $GITHUB_OUTPUT

          PRIVATE_SUBNET_IDS=$(terraform output -json private_subnet_ids)
          echo "PRIVATE_SUBNET_IDS=$PRIVATE_SUBNET_IDS" >> $GITHUB_OUTPUT


  task:
    needs: build
    runs-on: ubuntu-latest
    outputs:
      task_definition_arn: ${{ steps.set-envs.outputs.TASK_DEFINITION_ARN }}
      image_uri: ${{ steps.set-envs.outputs.IMAGE_URI }}
      cloudwatch_log_group: ${{ steps.set-envs.outputs.CLOUDWATCH_LOG_GROUP }}
    steps:
      - uses: actions/checkout@v4
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.aws_region }}
          role-to-assume: arn:aws:iam::${{ env.aws_account_id }}:role/${{ env.aws_role }}
          role-session-name: GitHubActions

      - name: Init
        shell: bash
        run: |
          cd tf/task
          terraform init
    
      - name: Deploy
        shell: bash
        id: deploy
        run: |
          cd tf/task
          terraform apply -auto-approve

      - name: Set env vars
        id: set-envs
        shell: bash
        run: |
          cd tf/task

          TASK_DEFINITION_ARN=$(terraform output -raw task_definition_arn)
          echo "TASK_DEFINITION_ARN=$TASK_DEFINITION_ARN" >> $GITHUB_OUTPUT

          IMAGE_URI=$(terraform output -raw image_uri)
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_OUTPUT

          CLOUDWATCH_LOG_GROUP=$(terraform output -raw cloudwatch_log_group)
          echo "CLOUDWATCH_LOG_GROUP=$CLOUDWATCH_LOG_GROUP" >> $GITHUB_OUTPUT

  service:
    needs: 
      - build
      - task
      - network
    runs-on: ubuntu-latest
    env:
      TF_VAR_task_definition_arn: ${{ needs.task.outputs.task_definition_arn }}
      TF_VAR_private_vpc_id: ${{ needs.network.outputs.private_vpc_id }}
      TF_VAR_private_subnet_ids: ${{ needs.network.outputs.private_subnet_ids }}
      TF_VAR_lb_target_group_arn: ${{ needs.network.outputs.target_group_arn }}
      TF_VAR_load_balancer_security_group_id: ${{ needs.network.outputs.lb_security_group_id }}
    steps:
      - uses: actions/checkout@v4
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.aws_region }}
          role-to-assume: arn:aws:iam::${{ env.aws_account_id }}:role/${{ env.aws_role }}
          role-session-name: GitHubActions

      - name: Init
        shell: bash
        run: |
          cd tf/service
          terraform init
    
      - name: Deploy
        shell: bash
        id: deploy
        run: |
          cd tf/service
          terraform apply -auto-approve

  # deploy:
  #   needs: task-definition
  #   runs-on: ubuntu-latest
  #   outputs:
  #     deployed_url: ${{ steps.set-envs.outputs.DEPLOYED_URL }}
  #     cluster_name: ${{ steps.set-envs.outputs.CLUSTER_NAME }}
  #     service_name: ${{ steps.set-envs.outputs.SERVICE_NAME }}
      
  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: Configure AWS Credentials
  #       uses: aws-actions/configure-aws-credentials@v4
  #       with:
  #           aws-region: ${{ env.aws_region }}
  #           role-to-assume: arn:aws:iam::${{ env.aws_account_id }}:role/${{ env.aws_role }}
  #           role-session-name: GitHubActions

  #     - name: Init
  #       shell: bash
  #       run: |
  #           cd tf
  #           terraform init
    
  #     - name: Deploy
  #       shell: bash
  #       id: deploy
  #       run: |
  #           cd tf
  #           terraform apply -auto-approve

  #     - name: Set env vars
  #       id: set-envs
  #       shell: bash
  #       run: |
  #         cd tf

  #         DEPLOYED_URL=$(terraform output -raw url)
  #         echo "DEPLOYED_URL=$DEPLOYED_URL" >> $GITHUB_OUTPUT

  #         CLUSTER_NAME=$(terraform output -raw cluster_name)
  #         echo "CLUSTER_NAME=$CLUSTER_NAME" >> $GITHUB_OUTPUT

  #         SERVICE_NAME=$(terraform output -raw service_name)
  #         echo "SERVICE_NAME=$SERVICE_NAME" >> $GITHUB_OUTPUT

  # check:
  #   needs: 
  #     - task-definition
  #     - deploy
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Configure AWS Credentials
  #       uses: aws-actions/configure-aws-credentials@v4
  #       with:
  #           aws-region: ${{ env.aws_region }}
  #           role-to-assume: arn:aws:iam::${{ env.aws_account_id }}:role/${{ env.aws_role }}
  #           role-session-name: GitHubActions

  #     - name: Get current task definition
  #       id: task-def
  #       shell: bash
  #       run: |
  #         TASK_DEF_ARN=$(aws ecs describe-services \
  #             --cluster ${{ needs.deploy.outputs.cluster_name }} \
  #             --services ${{ needs.deploy.outputs.service_name }} \
  #             --region ${{ env.aws_region }} \
  #             --query 'services[0].taskDefinition' \
  #             --output text)
  #         echo "TASK_DEF_ARN=$TASK_DEF_ARN" >> $GITHUB_ENV

  #     - name: Get image from task definition
  #       id: check-image
  #       shell: bash
  #       run: |
  #         CURRENT_IMAGE=$(aws ecs describe-task-definition \
  #             --task-definition ${{ env.TASK_DEF_ARN }} \
  #             --region ${{ env.aws_region }} \
  #             --query 'taskDefinition.containerDefinitions[*].image' \
  #             --output text)
  #         echo "CURRENT_IMAGE=$CURRENT_IMAGE"
  #         echo "CURRENT_IMAGE=$CURRENT_IMAGE" >> $GITHUB_ENV

  #     - name: Compare with Terraform image
  #       id: compare
  #       run: |
  #         if [ "${{ env.CURRENT_IMAGE }}" != "${{ needs.task-definition.outputs.image_uri }}" ]; then
  #           echo "ERROR: Image mismatch! Current image: ${{ env.CURRENT_IMAGE }}, Expected: ${{ needs.task-definition.outputs.image_uri }}"
  #           exit 1
  #         else
  #           echo "Image matched: ${{ env.CURRENT_IMAGE }}"
  #         fi