name: Setup

on:
  push:
    branches:
      - 'blue-green-deploy'
  workflow_dispatch:

permissions:
  id-token: write
  contents: read
      
jobs:
  check:
    runs-on: ubuntu-latest
    env:
      TFVARS_FILE: tf/variables.tfvars
    outputs:
      service_exists: ${{ steps.check-service-exists.outputs.SERVICE_EXISTS }}
    steps:
      - uses: actions/checkout@v4
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars.aws_region }}
          role-to-assume: arn:aws:iam::${{ vars.aws_account_id }}:role/${{ vars.aws_role }}
          role-session-name: GitHubActions

      - name: Read project_name from variables.tfvars
        id: read-vars
        run: |
          PROJECT_NAME=$(grep 'project_name' "$TFVARS_FILE" | sed 's/.*= "\(.*\)"/\1/')
          echo "Extracted Project Name: $PROJECT_NAME"
          echo "PROJECT_NAME=$PROJECT_NAME" >> $GITHUB_ENV

      - name: Check if ECS service exists
        id: check-service-exists
        run: |
          SERVICE_NAME=$(aws ecs describe-services \
            --cluster <your-cluster-name> \
            --services ${{ steps.read-vars.outputs.read-vars.PROJECT_NAME }} \
            --query 'services[0].status' \
            --region ${{ vars.aws_region }} \
            --output text 2>/dev/null || echo "NOT_FOUND")
          
          if [ "$SERVICE_NAME" == "NOT_FOUND" ]; then
            echo "SERVICE_EXISTS=false" >> $GITHUB_ENV
          else
            echo "SERVICE_EXISTS=true" >> $GITHUB_ENV
          fi

      - name: Set output for service existence
        run: echo "SERVICE_EXISTS=${{ env.SERVICE_EXISTS }}" >> $GITHUB_OUTPUT
  
  init:
    needs: check
    if: ${{ needs.check.outputs.service_exists == 'false' }} 
    uses: ./.github/workflows/build.yml
    with:
      aws_account_id: ${{ vars.AWS_ACCOUNT_ID }}
      aws_region: ${{ vars.AWS_REGION }}
      aws_role: ${{ vars.AWS_ROLE }}

  # service:
  #   needs:
  #     - check
  #     - init
  #   if: ${{ needs.check.outputs.service_exists == 'false' }} 
  #   runs-on: ubuntu-latest
  #   env:
  #     TF_VAR_task_definition_arn: ${{ needs.init.outputs.task_definition_arn }}
  #   outputs:
  #     cluster_name: ${{ steps.set-envs.outputs.CLUSTER_NAME }}
  #     service_name: ${{ steps.set-envs.outputs.SERVICE_NAME }}
  #     lb_listener_arn: ${{ steps.set-envs.outputs.LB_LISTENER_ARN }}
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Configure AWS Credentials
  #       uses: aws-actions/configure-aws-credentials@v4
  #       with:
  #         aws-region: ${{ vars.aws_region }}
  #         role-to-assume: arn:aws:iam::${{ vars.aws_account_id }}:role/${{ vars.aws_role }}
  #         role-session-name: GitHubActions

  #     - name: Init
  #       shell: bash
  #       run: |
  #         cd tf/service
  #         terraform init
    
  #     - name: Deploy
  #       shell: bash
  #       id: deploy
  #       run: |
  #         cd tf/service
  #         terraform apply -auto-approve -var-file=${{ github.workspace }}/tf/variables.tfvars

  #     - name: Set env vars
  #       id: set-envs
  #       shell: bash
  #       run: |
  #         cd tf/service
  #         LB_LISTENER_ARN=$(terraform output -raw lb_listener_arn)
  #         echo "LB_LISTENER_ARN=$LB_LISTENER_ARN" >> $GITHUB_OUTPUT


  # network:
  #   needs: 
  #     - check
  #     - service
  #   if: ${{ needs.check.outputs.service_exists == 'false' }} 
  #   runs-on: ubuntu-latest
  #   env:
  #     TF_VAR_load_balancer_listener_arn: ${{ needs.service.outputs.lb_listener_arn }}
  #   outputs:
  #     api_invoke_url: ${{ steps.set-envs.outputs.API_INVOKE_URL }}
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Configure AWS Credentials
  #       uses: aws-actions/configure-aws-credentials@v4
  #       with:
  #         aws-region: ${{ vars.aws_region }}
  #         role-to-assume: arn:aws:iam::${{ vars.aws_account_id }}:role/${{ vars.aws_role }}
  #         role-session-name: GitHubActions

  #     - name: Init
  #       shell: bash
  #       run: |
  #         cd tf/network
  #         terraform init
    
  #     - name: Deploy
  #       shell: bash
  #       id: deploy
  #       run: |
  #         cd tf/network
  #         terraform apply -auto-approve -var-file=${{ github.workspace }}/tf/variables.tfvars

  #     - name: Set env vars
  #       id: set-envs
  #       shell: bash
  #       run: |
  #         cd tf/network
  #         API_INVOKE_URL=$(terraform output -raw api_invoke_url)
  #         echo "API_INVOKE_URL=$API_INVOKE_URL" >> $GITHUB_OUTPUT
        